import java.io.*;
import java.util.*;
 
public class NQueenProblem { 
    static int N;
    public static void main(String args[]) 
    { 
        Scanner ob = new Scanner(System.in);
        int n = ob.nextInt();
        N = n;
        int matrix[][] = new int[n][n];

        if (!NQProblem(matrix, 0)) { 
            System.out.print("Solution does not exist"); 
            return; 
        } 
        printSolution(matrix); 
    }
    static void printSolution(int board[][]) 
    { 
        for (int i = 0; i < N; i++) { 
            for (int j = 0; j < N; j++) 
                System.out.print(" " + board[i][j] 
                                 + " "); 
            System.out.println(); 
        } 
    } 
    static boolean isSafe(int board[][], int row, int col) 
    { 
        int i, j; 
  
        /* Check this row on left side */
        for (i = 0; i < col; i++) 
            if (board[row][i] == 1) 
                return false; 
  
        /* Check upper diagonal on left side */
        for (i = row, j = col; i >= 0 && j >= 0; i--, j--) 
            if (board[i][j] == 1) 
                return false; 
  
        /* Check lower diagonal on left side */
        for (i = row, j = col; j >= 0 && i < N; i++, j--) 
            if (board[i][j] == 1) 
                return false; 
  
        return true; 
    } 
  
    static boolean NQProblem(int board[][], int col) 
    { 
        /* base case: If all queens are placed 
           then return true */
        if (col >= N) 
            return true; 
 
        for (int i = 0; i < N; i++) { 
            /* Check if the queen can be placed on 
               board[i][col] */
            if (isSafe(board, i, col)) { 
                /* Place this queen in board[i][col] */
                board[i][col] = 1; 
  
                /* recur to place rest of the queens */
                if (NQProblem(board, col + 1)) 
                    return true; 
  
                board[i][col] = 0; // BACKTRACK 
            } 
        } 
        return false; 
    } 
} 
